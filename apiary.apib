FORMAT: 1A
HOST: https://app.2bedone.net:19191

2bedone API v2
-----
Добро пожаловать в [2bedone](https://2bedone.net).
-----
-----
Примечание:
```
Дата передается по стандарту ISO 8601.
- DateTime ... yyyy-MM-ddTHH:mm:ssTZD
Example = 2015-08-17T19:17:53.429Z
- Date ... yyyy-MM-dd
Example = 2015:08:17
- Time ... HH:mm:ss.SSS
Example = 22:17:53.429, 22:17
```

-----

# Group API SECURITY

## Пользователь [/sec/user]

### создать пользователя [POST]

+ Request (application/json)

    + Headers

            Authorization: Basic {clientId:clientSecret-Encode64}

    + Body

            {
                "email" : "test3@2bedone.net",
                "password" : "1Medialex",
                "firstname" : "firsname",
                "lastname" : "lastname",
                "age" : 0,
                "avatarsource" : "http://"
            }

+ Response 200 (application/json)

            {
              "id": "68a1d1d9-87b4-44e2-b60a-72a752b47772",
              "email": "test3@2bedone.net",
              "firstname": "firsname",
              "lastname": "lastname",
              "age": 0,
              "avatarsource": "http://"
            }   

+ Response 400 (application/json)

            {
              "url": "/user",
              "message": "Server security error: user already exists"
            }
        
+ Response 401 (application/json)

            {
              "error": "unauthorized",
              "error_description": "Client is not configured"
            }

### получить данные пользователя [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Basic {clientId:clientSecret-Encode64}
            email: username
            password: password

+ Response 200 (application/json)

            {
              "email": "example@mail.ru",
              "firstName": "example",
              "lastName": "example",
              "age": 0,
              "avatarsource": "http://avatarsource"
              "id": "b6049896-b2da-46c4-a556-bc259855f756"
            }
            
+ Response 400 (application/json)

            {
              "url": "/user",
              "message": "Server security error: email or password incorrect"
            }
            
+ Response 401 (application/json)

            {
              "error": "unauthorized",
              "error_description": "Client is not configured"
            }


### обновить данные пользователя [PUT]

+ Request (application/json)

    + Headers
    
            Authorization: Basic {clientId:clientSecret-Encode64}
            
    + Body 
            
            {
                "email" : "test1@2bedone.net",
                "password" : "1Medialex",
                "firstname" : "updated"
            }
            
+ Response 200 (application/json)

            {
              "id": "836d686d-ad53-4625-a64d-66c74e7d22b0",
              "email": "test1@2bedone.net",
              "firstname": "updated",
              "updated": "2016-02-25T14:00:23.021Z"
            }
            
+ Response 400 (application/json)

            {
              "url": "/user",
              "message": "Server security error: user not found"
            }
            
+ Response 401 (application/json)

            {
              "error": "unauthorized",
              "error_description": "Client is not configured"
            }

## Токен [/sec/oauth]

### Получить токен [POST /oauth/token{?grant_type,username,password,scope}]

+ Parameters
    + grant_type: password (string,required)
    + username: example@example.com (string,required)
    + password: example password (string,required)
    + scope: read write (string,required)



+ Request (application/json)

    + Headers
    
            Authorization: Basic {clientId:clientSecret-Encode64}

+ Response 200 (application/json)

            {
              "access_token": "fc98b5f2-6ac6-4850-bcc5-7fe3846363c7",
              "token_type": "bearer",
              "refresh_token": "4f8aea67-ad06-43d8-af54-c4d3da3fb432",
              "scope": "read write"
            }

+ Response 400 (application/json)

            {
              "error": "invalid_grant",
              "error_description": "Bad credentials"
            }
            
+ Response 401 (application/json)

            {
              "error": "unauthorized",
              "error_description": "Client is not configured"
            }


### Обновить токен [POST /oauth/token{?grant_type,refresh_token}]

+ Parameters 
    + grant_type (string,required) ... refresh_token
    + refresh_token (string,required) ... xxxx-xxxx-xxxx-xxxx

+ Request (application/json)

+ Response 200 (application/json)

            {
              "access_token": "fd378cf6-2324-4884-950b-d7d89673e999",
              "token_type": "bearer",
              "refresh_token": "4f8aea67-ad06-43d8-af54-c4d3da3fb432",
              "scope": "read write"
            }
            
+ Response 400 (application/json)

            {
              "error": "invalid_grant",
              "error_description": "Invalid refresh token: 4f8aea67-ad06-43d8-af54-c4d3da3fb43"
            }


### Проверить токен [POST /oauth/check_token{?token}]

+ Parameters
    + token (string,required) ... токен, который необходимо проверить
        + Example = "9816145c-6e0b-4e7f-90dd-e5bfd5aa560d"

+ Request (application/json)

    + Headers
    
            Authorization: Basic {clientId:clientSecret-Encode64}

+ Response 200 (application/json)


        {
          "user_name": "d0627677-d68f-4937-940f-7cb3584a5988",
          "authorities": [
            "ROLE_USER"
          ],
          "client_id": "3468a347f4ce4080898c1055a9f39a1a",
          "scope": [
            "read",
            "write"
          ]
        }
        
        
+ Response 400 (application/json)

        {
          "status": 401,
          "error": "Unauthorized",
          "message": "Bad credentials",
          "timeStamp": "Tue Sep 01 14:40:51 UTC 2015",
          "trace": null
        }

### 

# Group API RESOURCE

## Задачи [/res/task] 

### добавление задач [POST]

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
    
            [
              {
                "localid": 21,
                "name": "41-111",
                "description": "description",
                "startdate": "2016-02-22",
                "enddate": "2016-02-22",
                "hasreminder": "false",
                "reminder": "17:36:17.163",
                "priority": 1,
                "repeat": 2,
                "files": null,
                "tags": null,
                "location": {
                  "latitude": 10.123,
                  "longitude": 20.345
                },
                "isdeleted": "false",
                "issolved": "false"
              }
            ]

+ Response 200 (application/json)

            [
              {
                "localid": 21,
                "serverid": 6,
                "name": "41-111",
                "description": "description",
                "startdate": "2016-02-22",
                "enddate": "2016-02-22",
                "hasreminder": false,
                "reminder": "17:36:17.163",
                "solvedate": null,
                "priority": 1,
                "repeat": 2,
                "files": null,
                "tags": null,
                "location": {
                  "latitude": 10.123,
                  "longitude": 20.345
                },
                "issolved": false,
                "isdeleted": false,
                "deleteddate": null,
                "subtasks": []
              }
            ]

+ Response 400 (application/json)

        {
          "url": "/task",
          "message": "*error* ..."
        }


### выборка задачи [GET /res/task/{id}]

+ Parameters
   
   + id (number,required) ... ид задачи
        + Example = 2

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)   

            {
              "search": [
                {
                  "name": "name test",
                  "description": "description test",
                  "priority": "2",
                  "isdeleted": "true",
                  "repeat": "2",
                  "issolved": "true",
                  "hasreminder": "true",
                  "tag": [],
                  "subtasks": null,
                  "serverid": "43",
                  "deleteddate": "2015-08-17T19:17:53.429Z",
                  "solvedate": "2015-08-17T19:17:53.429Z",
                  "reminder": "22:17:53.429",
                  "startdate": "2015-08-26",
                  "enddate": "2015-08-26"
                }
              ]
            }

+ Response 400 (application/json)

            {
              "url": "/task/{?}",
              "message": "*error* ..."
            }
            
### выборка измененных задач [GET /res/task{?revision}]

+ Parameters
    
    + revision = 0 (int,optional) ... актуальная ревизия клиента.
    
+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
+ Response 200 (application/json)

            {
              "search": [
                {
                  "serverid": 6,
                  "name": "41-111",
                  "description": "description",
                  "startdate": "2016-02-22",
                  "enddate": "2016-02-22",
                  "hasreminder": false,
                  "reminder": "17:36:17",
                  "solvedate": null,
                  "priority": 1,
                  "repeat": 2,
                  "files": [],
                  "tags": [],
                  "location": null,
                  "issolved": false,
                  "isdeleted": false,
                  "deleteddate": null,
                  "subtasks": []
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/task",
              "message": "*error* ..."
            }
            
### поиск задач по типу [GET /res/task/type{?type,revision}]

+ Parameters

    + type (enum[string],required)

         Тип задач

         + Members
            + today
            + scheduled
            + issolved
            + isdeleted
            + expired
            
    + revision = 0 (number,optional) ... ревизия 
    
+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
+ Response 200 (application/json)

            {
              "search": [
                {
                  "name": "name test",
                  "description": "description test",
                  "priority": "2",
                  "isdeleted": "true",
                  "repeat": "2",
                  "issolved": "true",
                  "hasreminder": "true",
                  "tag": [],
                  "subtasks": null,
                  "serverid": "43",
                  "deleteddate": "2015-08-17T19:17:53.429Z",
                  "solvedate": "2015-08-17T19:17:53.429Z",
                  "reminder": "22:17:53.429",
                  "startdate": "2015-08-26",
                  "enddate": "2015-08-26"
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/task/type",
              "message": "*error* ..."
            }

### поиск задач [GET /res/task/search{?date,priority,repeat,hasreminder,revision,issolved,isdeleted}]

+ Parameters
    
    + date = 2015-07-08T12:12 (string,optional)  ... Дата в формате ISO 8601. Выборка списка задач, где выбранная дата >= "startDate", но <= "endDate"
    
    + priority (enum[number],optional)

         Приоритет

         + Members
            + 0 : No
            + 1 : Low
            + 2 : Normal
            + 3 : High
            
    + repeat (enum[number],optional)

         Повторения

         + Members
            + 0 : Never
            + 1 : EveryDay
            + 2 : EveryWeek
            + 3 : EveryMonth
            + 4 : EveryYear

    + hasreminder = true (boolean,optional) ... Напоминание

    + revision = 0 (number,optional) ... Ревизия 

    + issolved = false (boolean,optional) ... Решенные задачи
    
    + isdeleted = false (boolean,optional) ... Включить удаленные встречи

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            {
              "search": [
                {
                  "name": "name test",
                  "description": "description test",
                  "priority": "2",
                  "isdeleted": "true",
                  "repeat": "2",
                  "issolved": "true",
                  "hasreminder": "true",
                  "tag": null,
                  "subtasks": null,
                  "serverid": "43",
                  "deleteddate": "2015-08-17T18:39:27.969Z",
                  "solvedate": "2015-08-17T18:39:27.969Z",
                  "reminder": "18:39:00.000",
                  "startdate": "2015-08-26",
                  "enddate": "2015-08-26"
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/task/type",
              "message": "*error* ..."
            }

### изменение задачи [PUT /res/task/{id}]

+ Parameters
    
    + id (int) - ид задачи

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json

    + Body 
    
            {
              "name": "41-111",
              "description": "description",
              "startdate": "2016-02-22",
              "enddate": "2016-02-22",
              "hasreminder": "false",
              "reminder": "17:36:17.163",
              "priority": 1,
              "repeat": 2,
              "files": null,
              "tags": null,
              "location": {
                "latitude": 10.123,
                "longitude": 20.345
              },
              "isdeleted": "false",
              "deleteddate": "2016-02-22T14:36:17.156Z",
              "issolved": "false"
            }
            
+ Response 200 (application/json)

            {
              "serverid": 1,
              "name": "41-111",
              "description": "description",
              "startdate": "2016-02-22",
              "enddate": "2016-02-22",
              "hasreminder": false,
              "reminder": "17:36:17.163",
              "solvedate": null,
              "priority": 1,
              "repeat": 2,
              "files": null,
              "tags": null,
              "location": {
                "latitude": 10.123,
                "longitude": 20.345
              },
              "issolved": false,
              "isdeleted": false,
              "deleteddate": "2016-02-22T14:36:17.156Z",
              "subtasks": []
            }
            
+ Response 400 (application/json)

            {
              "url": "/task/type",
              "message": "*error* ..."
            }

### изменение задач [PUT]

+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json

    + Body

            [
              {
                "serverid": 2,
                "name": "update-41-111",
                "description": "description",
                "startdate": "2016-02-22",
                "enddate": "2016-02-22",
                "hasreminder": "false",
                "reminder": "17:36:17.163",
                "priority": 1,
                "solvedate": "2016-02-24T14:04:15.044Z",
                "repeat": 2,
                "files": null,
                "tags": null,
                "location": {
                  "latitude": 10.123,
                  "longitude": 20.345
                },
                "isdeleted": "false",
                "issolved": false,
                "subtasks": null
              }
            ]
            
+ Response 200 (application/json)

            [
              {
                "serverid": 2,
                "name": "update-41-111",
                "description": "description",
                "startdate": "2016-02-22",
                "enddate": "2016-02-22",
                "hasreminder": false,
                "reminder": "17:36:17.163",
                "solvedate": "2016-02-24T14:04:15.044Z",
                "priority": 1,
                "repeat": 2,
                "files": null,
                "tags": null,
                "location": {
                  "latitude": 10.123,
                  "longitude": 20.345
                },
                "issolved": false,
                "isdeleted": false,
                "deleteddate": null,
                "subtasks": []
              }
            ]

+ Response 400 (application/json)

            {
              "url": "/task",
              "message": "*error* ..."
            }

### удаление задачи [DELETE /res/task/{id}]

+ Parameters
    
    + id (number) - ид задачи
    
+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json
            
+ Response 200 (application/json)

        {
          "serverid": 2,
          "name": "update-41-111",
          "description": "description",
          "startdate": "2016-02-22",
          "enddate": "2016-02-22",
          "hasreminder": false,
          "reminder": "17:36:17",
          "solvedate": "2016-02-24T14:04:15.044Z",
          "priority": 1,
          "repeat": 2,
          "files": [],
          "tags": [],
          "location": {
            "latitude": 10.123,
            "longitude": 20.345
          },
          "issolved": false,
          "isdeleted": null,
          "deleteddate": "2016-02-25T13:31:17.702Z",
          "subtasks": []
        }
        
+ Response 400 (application/json)

            {
              "url": "/task",
              "message": "*error* ..."
            }

### удаление задач [DELETE /res/task{?idtask}]

+ Parameters

   + idtask (array[int],required) ... массив удаляемых задач
        + Example = [1,2,3,4,5]
        + Example = 2

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            [
              {
                "serverid": 2,
                "name": "update-41-111",
                "description": "description",
                "startdate": "2016-02-22",
                "enddate": "2016-02-22",
                "hasreminder": false,
                "reminder": "17:36:17",
                "solvedate": "2016-02-24T14:04:15.044Z",
                "priority": 1,
                "repeat": 2,
                "files": [],
                "tags": [],
                "location": {
                  "latitude": 10.123,
                  "longitude": 20.345
                },
                "issolved": false,
                "isdeleted": null,
                "deleteddate": "2016-02-25T13:29:32.093Z",
                "subtasks": []
              }
            ]

+ Response 400 (application/json)

            {
              "url": "/task",
              "message": "*error* ..."
            }

## Блокноты [/res/notebook]

### добавление блокнота [POST]

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
    
            {
                "name": "test name"
            }
            
+ Response 200 (application/json)

        {
          "notes": null,
          "serverid": 5,
          "name": "test name",
          "isdeleted": false,
          "deleteddate": null
        }

### выборка блокнота [GET /res/notebook/{id}]

+ Parameters
    
    + id (int) - ид блокнота
    
+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
    
+ Response 200 (application/json)

        {
          "search": [
            {
              "notes": [
                {
                  "serverid": 4,
                  "date": "2016-02-22T14:36:17.156Z",
                  "description": "description",
                  "isimportant": false,
                  "files": [],
                  "tags": [],
                  "isdeleted": false,
                  "deleteddate": null,
                  "idnotebook": 2
                }
              ],
              "serverid": 2,
              "name": null,
              "isdeleted": false,
              "deleteddate": null
            }
          ]
        }
    
### выборка измененных блокнотов [GET /res/notebook{?revision}]

+ Parameters
    
    + revision = 0 (int,optional) ... актуальная ревизия клиента.
    
+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
    
+ Response 200 (application/json)

        {
          "search": [
            {
              "notes": [
                {
                  "serverid": 4,
                  "date": "2016-02-22T14:36:17.156Z",
                  "description": "description",
                  "isimportant": false,
                  "files": [],
                  "tags": [],
                  "isdeleted": false,
                  "deleteddate": null,
                  "idnotebook": 2
                }
              ],
              "serverid": 2,
              "name": null,
              "isdeleted": false,
              "deleteddate": null
            },
            {
              "notes": [],
              "serverid": 5,
              "name": "test name",
              "isdeleted": false,
              "deleteddate": null
            },
            {
              "notes": [],
              "serverid": 3,
              "name": "update-notebook",
              "isdeleted": false,
              "deleteddate": null
            }
          ]
        }

### изменение блокнота [PUT /res/notebook/{id}]

+ Parameters
    
    + id (int) - ид блокнота

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
    
            {
                "name": "new-name"
            }
            
+ Response 200 (application/json)

        {
          "notes": null,
          "serverid": 3,
          "name": "new-name",
          "isdeleted": false,
          "deleteddate": null
        }

### удаление блокнота [DELETE /res/notebook/{id}]

+ Parameters
    
    + id (number) - ид блокнота
    
+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
    
+ Response 200 (application/json)

        {
          "notes": [],
          "serverid": 3,
          "name": "new-name",
          "isdeleted": null,
          "deleteddate": "2016-02-25T10:29:16.457Z"
        }

## Заметки [/res/note] 

### добавление заметок [POST]

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
            
            [
                {
                    "localid": 12,
                    "description": "description",
                    "date": "2016-02-22T14:36:17.156Z",
                    "isimportant": false
                }
            ]

+ Response 200 (application/json)

            [
              {
                "localid": 12,
                "serverid": 7,
                "date": "2016-02-22T14:36:17.156Z",
                "description": "description",
                "isimportant": false,
                "files": null,
                "tags": null,
                "isdeleted": false,
                "deleteddate": null,
                "idnotebook": 2
              }
            ]

+ Response 400 (application/json)

        {
          "url": "/note",
          "message": "*error* ..."
        }

### выборка заметки [GET /res/note/{id}]

+ Parameters
   
   + id (number) - ид заметки

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)   

            {
              "search": [
                {
                  "serverid": 2,
                  "date": "2016-02-22T14:36:17.156Z",
                  "description": "description",
                  "isimportant": false,
                  "files": [],
                  "tags": [],
                  "isdeleted": null,
                  "deleteddate": "2016-02-24T13:15:09.176Z",
                  "idnotebook": 2
                }
              ]
            }

+ Response 400 (application/json)

            {
              "url": "/note/{?}",
              "message": "*error* ..."
            }
            
### поиск заметок по типу [GET /res/note/type{?type,revision}]

+ Parameters
    
    + type (enum[string],required)
            
        тип списка заметок
            
        + Members
            + all
            + isimportant
            
    + revision = 0 (number,optional) ... Ревизия
  
+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json
 
+ Response 200 (application/json)

            {
              "search": [
                {
                  "description": "create note",
                  "isimportant": true,
                  "isdeleted": true,
                  "tag": [],
                  "date": "2015-08-17T19:17:53.429Z",
                  "serverid": "30",
                  "idnotebook": 5
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/note",
              "message": "*error* ..."
            }

### поиск заметок [GET /res/note/search{?date,isimportant,revision,isdeleted}]

+ Parameters

    + date = 2015-07-08T12:12 (string,optional)  ... Дата в формате ISO 8601. Находит все заметки, у которых дата создания больше выбранной
    
    + isimportant = true (boolean,optional) ... Важность заметок

    + revision = 0 (number,optional) ... Ревизия 
    
    + isdeleted = false (boolean,optional) ... Включить удаленные заметки

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            {
              "search": [
                {
                  "description": "create note",
                  "isimportant": false,
                  "isdeleted": true,
                  "tag": [],
                  "date": "2015-08-17T19:17:53.429Z",
                  "serverid": "30",
                  "idnotebook": 5
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/note",
              "message": "*error* ..."
            }

### изменение заметки [PUT /res/note/{id}]

+ Parameters
    
    + id (number) - ид заметки
    
+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
    
            {
                "description": "description",
                "date": "2016-02-22T14:36:17.156Z",
                "isimportant": false,
                "isdeleted": true,
                "idnotebook": 5
            }

+ Response 200 (application/json)

            {
              "serverid": 2,
              "date": "2016-02-22T14:36:17.156Z",
              "description": "description",
              "isimportant": false,
              "files": null,
              "tags": null,
              "isdeleted": true,
              "deleteddate": null,
              "idnotebook": 5
            }
            
+ Response 400 (application/json)

            {
              "url": "/note/{?}",
              "message": "*error* ..."
            }

### изменение заметок [PUT]

+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json

    + Body

            [
                {
                    "serverid":2,
                    "description": "description",
                    "date": "2016-02-22T14:36:17.156Z",
                    "isimportant": false,
                    "idnotebook": 5
                }
            ]
            
+ Response 200 (application/json)

            [
              {
                "serverid": 2,
                "date": "2016-02-22T14:36:17.156Z",
                "description": "description",
                "isimportant": false,
                "files": null,
                "tags": null,
                "isdeleted": false,
                "deleteddate": null,
                "idnotebook": 5
              }
            ]

+ Response 400 (application/json)

            {
              "url": "/note",
              "message": "*error* ..."
            }

### удаление заметки [DELETE /res/note/{id}]

+ Parameters
    
    + id (number) - ид заметки
    
+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json
    
+ Response 200 (application/json)

        {
          "serverid": 2,
          "date": "2016-02-22T14:36:17.156Z",
          "description": "description",
          "isimportant": false,
          "files": [],
          "tags": [],
          "isdeleted": null,
          "deleteddate": "2016-02-25T10:48:54.946Z",
          "idnotebook": 5
        }
        
+ Response 400 (application/json)

            {
              "url": "/note",
              "message": "*error* ..."
            }

### удаление заметок [DELETE /res/note{?idnote}]

+ Parameters

   + idnote (array[int],required) ... Массив удаляемых заметок или заметки
        + Example = [1,2,3,4,5]
        + Example = 2

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

        [
          {
            "serverid": 2,
            "date": "2016-02-22T14:36:17.156Z",
            "description": "description",
            "isimportant": false,
            "files": [],
            "tags": [],
            "isdeleted": null,
            "deleteddate": "2016-02-25T10:49:58.897Z",
            "idnotebook": 5
          }
        ]

+ Response 400 (application/json)

            {
              "url": "/note",
              "message": "*error* ..."
            }

## Встречи [/res/meet] 

### добавление встреч [POST]

+ Request (application/json)

    + Headers
            
            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
            
            [
                {
                    "localid": 21,
                    "name": "description",
                    "meeting": "2016-02-22T14:36:17.156+06:00",
                    "hasreminder": false,
                    "isimportant": false
                }
            ]

+ Response 200 (application/json)

            [
              {
                "localid": 21,
                "serverid": 6,
                "name": "description",
                "isimportant": false,
                "meeting": "2016-02-22T08:36:17.156Z",
                "reminder": null,
                "hasreminder": false,
                "location": null,
                "tags": null,
                "isdeleted": false,
                "deleteddate": null
              }
            ]

+ Response 400 (application/json)

        {
          "url": "/meet",
          "message": "*error* ..."
        }


### выборка встречи [GET /res/meet/{id}]

+ Parameters
   
   + id (number,required) ... ид встречи
        + Example = 12

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)   

            {
              "search": [
                {
                  "name": "create meet 0",
                  "isimportant": false,
                  "isdeleted": false,
                  "hasreminder": false,
                  "tag": [],
                  "meeting": "2015-08-17T19:17:53.429Z",
                  "reminder": "2015-08-17T19:17:53.429Z",
                  "serverid": 809
                }
              ]
            }

+ Response 400 (application/json)

            {
              "url": "/meet",
              "message": "*error* ..."
            }
       
### выборка измененных встреч [GET /res/meet{?revision}]

+ Parameters
    
    + revision = 0 (int,optional) ... актуальная ревизия клиента.
    
+ Request (application/json)

    + Headers 
    
            Authorization: bearer {access-token}
            Accept: application/json
    
+ Response 200 (application/json)

            {
              "search": [
                {
                  "serverid": 3,
                  "name": "6666description",
                  "isimportant": false,
                  "meeting": "2016-02-22T08:36:17.156Z",
                  "reminder": null,
                  "hasreminder": false,
                  "location": null,
                  "tags": [],
                  "isdeleted": null,
                  "deleteddate": "2016-02-25T12:57:07.52Z"
                },
                {
                  "serverid": 2,
                  "name": "+1description",
                  "isimportant": false,
                  "meeting": "2016-02-22T08:36:17.156Z",
                  "reminder": null,
                  "hasreminder": false,
                  "location": null,
                  "tags": [
                    "1",
                    "2"
                  ],
                  "isdeleted": false,
                  "deleteddate": null
                }
              ]
            }
            
+ Response 400 (application/json)

            {
              "url": "/meet",
              "message": "*error* ..."
            }

### поиск встреч по типу [GET /res/meet/type{?type,revision}]

+ Parameters

    + type (enum[string],required)
            
        тип списка встреч
            
        + Members
            + all
            + isimportant
            
    + revision = 0 (number,optional) ... Ревизия 
    
+ Request (application/json)

    + Headers 
    
            Authorization: bearer {access-token}
            Accept: application/json
            
+ Response 200 (application/json)

            {
              "search": [
                {
                  "name": "create meet 0",
                  "isimportant": true,
                  "isdeleted": false,
                  "hasreminder": false,
                  "tag": [],
                  "meeting": "2015-08-17T19:17:53.429Z",
                  "reminder": "2015-08-17T19:17:53.429Z",
                  "serverid": 810
                }
              ]
            }
            
+ Response 400 (applicartion/json)

            {
              "url": "/meet/type",
              "message": "*error* ..."
            }

### поиск встреч [GET  /res/meet/search{?meeting,isimportant,hasreminder,revision,isdeleted}]

+ Parameters
    
    + meeting = 2015-07-08T12:12 (string,optional)  ... Дата в формате ISO 8601. Находит все встречи, у которых дата встречи больше выбранной
    
    + isimportant = true (boolean,optional) ... Важность встреч
    
    + hasreminder = true (boolean,optional) ... Напоминание
        
    + revision = 0 (number,optional) ... Ревизия 
    
    + isdeleted = false (boolean,optional) ... Включить удаленные встречи

+ Request (application/json)

    + Headers 
    
            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            {
              "search": [
                {
                  "name": "create meet 0",
                  "isimportant": true,
                  "isdeleted": false,
                  "hasreminder": false,
                  "tags": [],
                  "meeting": "2015-08-17T19:17:53.429Z",
                  "reminder": "2015-08-17T19:17:53.429Z",
                  "serverid": 810
                }
              ]
            }

+ Response 400 (applicartion/json)

            {
              "url": "/meet/search",
              "message": "*error* ..."
            }

### изменение встречи [PUT /res/meet/{id}]

+ Parameters

   + id (number,required) - ид встречи

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json
            
    + Body
    
            {
                "name": "6666description",
                "meeting": "2016-02-22T14:36:17.156+06:00",
                "hasreminder": false,
                "isimportant": false
            }
            
+ Response 200 (application/json)

            {
              "serverid": 3,
              "name": "6666description",
              "isimportant": false,
              "meeting": "2016-02-22T08:36:17.156Z",
              "reminder": null,
              "hasreminder": false,
              "location": null,
              "tags": null,
              "isdeleted": false,
              "deleteddate": null
            }

### изменение встреч [PUT]

+ Request (application/json)

    + Headers
    
            Authorization: bearer {access-token}
            Accept: application/json

    + Body

            [
                {
                    "serverid" : 2,
                    "name": "+1description",
                    "meeting": "2016-02-22T14:36:17.156+06:00",
                    "hasreminder": false,
                    "isimportant": false,
                    "tags": [
                        "1",
                        "2"
                    ]
                }
            ]
            
+ Response 200 (application/json)

            [
              {
                "serverid": 2,
                "name": "+1description",
                "isimportant": false,
                "meeting": "2016-02-22T08:36:17.156Z",
                "reminder": null,
                "hasreminder": false,
                "location": null,
                "tags": [
                  "1",
                  "2"
                ],
                "isdeleted": false,
                "deleteddate": null
              }
            ]

+ Response 400 (application/json)

            {
              "url": "/meet",
              "message": "*error* ..."
            }

### удаление встречи [DELETE /res/meet/{id}]

+ Parameters

   + id (number,required) - ид встречи

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            {
              "serverid": 2,
              "name": "+1description",
              "isimportant": false,
              "meeting": "2016-02-22T08:36:17.156Z",
              "reminder": null,
              "hasreminder": false,
              "location": null,
              "tags": [],
              "isdeleted": null,
              "deleteddate": "2016-02-25T12:51:47.129Z"
            }

+ Response 400 (application/json)

            {
              "url": "/meet",
              "message": "*error* ..."
            }

### удаление встреч [DELETE /res/meet{?idmeet}]

+ Parameters

   + idmeet (array[int],required) ... Массив удаляемых встреч
        + Example = [1,2,3,4,5]
        + Example = 2

+ Request (application/json)

   + Headers 

            Authorization: bearer {access-token}
            Accept: application/json

+ Response 200 (application/json)

            [
              {
                "serverid": 3,
                "name": "6666description",
                "isimportant": false,
                "meeting": "2016-02-22T08:36:17.156Z",
                "reminder": null,
                "hasreminder": false,
                "location": null,
                "tags": [],
                "isdeleted": null,
                "deleteddate": "2016-02-25T12:57:07.52Z"
              }
            ]

+ Response 400 (application/json)

            {
              "url": "/meet",
              "message": "*error* ..."
            }